// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: buf/test.proto

package absv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Abs_Absolute_FullMethodName = "/blup.Abs/Absolute"
)

// AbsClient is the client API for Abs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AbsClient interface {
	Absolute(ctx context.Context, in *AbsRequest, opts ...grpc.CallOption) (*AbsResponse, error)
}

type absClient struct {
	cc grpc.ClientConnInterface
}

func NewAbsClient(cc grpc.ClientConnInterface) AbsClient {
	return &absClient{cc}
}

func (c *absClient) Absolute(ctx context.Context, in *AbsRequest, opts ...grpc.CallOption) (*AbsResponse, error) {
	out := new(AbsResponse)
	err := c.cc.Invoke(ctx, Abs_Absolute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AbsServer is the server API for Abs service.
// All implementations must embed UnimplementedAbsServer
// for forward compatibility
type AbsServer interface {
	Absolute(context.Context, *AbsRequest) (*AbsResponse, error)
	mustEmbedUnimplementedAbsServer()
}

// UnimplementedAbsServer must be embedded to have forward compatible implementations.
type UnimplementedAbsServer struct {
}

func (UnimplementedAbsServer) Absolute(context.Context, *AbsRequest) (*AbsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Absolute not implemented")
}
func (UnimplementedAbsServer) mustEmbedUnimplementedAbsServer() {}

// UnsafeAbsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AbsServer will
// result in compilation errors.
type UnsafeAbsServer interface {
	mustEmbedUnimplementedAbsServer()
}

func RegisterAbsServer(s grpc.ServiceRegistrar, srv AbsServer) {
	s.RegisterService(&Abs_ServiceDesc, srv)
}

func _Abs_Absolute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbsServer).Absolute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Abs_Absolute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbsServer).Absolute(ctx, req.(*AbsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Abs_ServiceDesc is the grpc.ServiceDesc for Abs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Abs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blup.Abs",
	HandlerType: (*AbsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Absolute",
			Handler:    _Abs_Absolute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "buf/test.proto",
}
